!function(a){function b(a){var b=/^\[object (Uint8(Clamped)?)|(Uint16)|(Uint32)|(Int8)|(Int16)|(Int32)|(Float(32)|(64))Array\]$/,c={isTrue:function(a){return"boolean"==typeof a&&a===!0},isFalse:function(a){return"boolean"==typeof a&&a===!1},isTruthy:function(a){return!!a},isFalsy:function(a){return!a},isTypedArray:function(a){return b.test(toString.call(a))},isScope:function(a){return angular.isObject(a)&&!!a.$evalAsync&&!!a.$watch},isWindow:function(a){return angular.isObject(a)&&a.window===a},isFile:function(a){return angular.isObject(a)&&"[object File]"===toString.call(a)},isFormData:function(a){return angular.isObject(a)&&"[object FormData]"===toString.call(a)},isBlob:function(a){return angular.isObject(a)&&"[object Blob]"===toString.call(a)},isBoolean:function(a){return"boolean"==typeof a},isPromiseLike:function(a){return angular.isObject(a)&&angular.isFunction(a.then)},isRegExp:function(a){return angular.isObject(a)&&"[object RegExp]"===toString.call(a)},isStringNotEmpty:function(a){return"string"==typeof a&&""!==a}},d=[["Array",angular],["BlankObject",angular],["Boolean",c],["Date",angular],["Element",angular],["Function",angular],["Number",angular],["String",angular],["Undefined",angular],["Object",angular],["StringNotEmpty",c],["Blob",c],["File",c],["FormData",c],["Scope",c],["Window",c],["RegExp",c],["PromiseLike",c],["TypedArray",c]];_.each(d,function(a){var b,c=this,d="is"+a[0];c[d]=function(b){if(!a[1][d](b)){var e=c[d].caller&&c[d].caller.name||"??";throw new Error(e+" -> Parameter is not a "+a[0].toLowerCase()+".")}return c},"Undefined"!==a[0]&&(b="is"+a[0]+"OrUndefined",c[b]=function(e){if(!a[1][d](e)&&!angular.isUndefined(e)){var f=c[b].caller&&c[b].caller.name||"??";throw new Error(f+" -> Parameter is not a "+a[0].toLowerCase()+" or undefined.")}return c}),b="is"+a[0]+"OrNull",c[b]=function(e){if(!a[1][d](e)&&null!==e){var f=c[b].caller&&c[b].caller.name||"??";throw new Error(f+" -> Parameter is not a "+a[0].toLowerCase()+" or null.")}return c}}.bind(this)),this.isInstanceOf=function(b,c){var d=angular.isString(c)?a.get(c):c;if(!d)throw new Error("invalid type for isInstanceOf: "+c);var e=this.isInstanceOf.caller&&this.isInstanceOf.caller.name||"??";if(angular.isUndefined(b))throw new Error(e+" -> Parameter is undefined but should be an instance of "+c);if(!(b instanceof d))throw new Error(e+" -> Parameter is not an instance of "+c);return this},this.isInstanceOfOrUndefined=function(b,c){var d=angular.isString(c)?a.get(c):c;if(!d)throw new Error("invalid type for isInstanceOf: "+c);if(!(angular.isUndefined(b)||b instanceof d)){var e=this.isInstanceOfOrUndefined.caller&&this.isInstanceOfOrUndefined.caller.name||"??";throw new Error(e+" -> Parameter is not an instance of "+c+" and is not undefined.")}return this},this.isInstanceOfOrNull=function(b,c){var d=angular.isString(c)?a.get(c):c;if(!d)throw new Error("invalid type for isInstanceOf: "+c);if(null!==b&&!(b instanceof d)){var e=this.isInstanceOf.caller&&this.isInstanceOf.caller.name||"??";throw new Error(e+" -> Parameter is not an instance of "+c+" and is not null.")}return this},this.isEnum=function(b,c){this.isNumber(b);var d=a.get(c);if(-1===_.indexOf(_.values(d),b)){var e=this.isEnum.caller&&this.isEnum.caller.name||"??";throw new Error(e+" -> ENUM of type "+c+" does not contain "+b)}return this}}a.service("$assert",["$injector",b])}(angular.module("ngAssert",[]));